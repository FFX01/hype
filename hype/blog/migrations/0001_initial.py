# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-02-12 07:13
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('slug', models.SlugField(blank=True, max_length=300, verbose_name='Post Slug')),
                ('body', models.TextField(blank=True, verbose_name='Body')),
                ('last_edited', models.DateTimeField(auto_now=True, verbose_name='Last Edited')),
                ('published_on', models.DateTimeField(auto_now=True, verbose_name='Time Published')),
                ('published', models.BooleanField(default=False, verbose_name='Is Published')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
            ],
            options={
                'verbose_name_plural': 'Blog Posts',
                'verbose_name': 'Blog Post',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Tag Name')),
                ('slug', models.SlugField(blank=True, max_length=300, verbose_name='Tag Slug')),
            ],
            options={
                'verbose_name_plural': 'Tags',
                'verbose_name': 'Tag',
            },
        ),
        migrations.AddField(
            model_name='post',
            name='tag',
            field=models.ManyToManyField(blank=True, related_name='posts', to='blog.Tag', verbose_name='Tag'),
        ),
    ]
